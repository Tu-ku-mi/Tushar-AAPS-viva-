#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Levenshtein {
public:
    int compute(const string &s1, const string &s2) {
        int m = s1.size();
        int n = s2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));

        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0)
                    dp[i][j] = j; // Insert all characters of s2
                else if (j == 0)
                    dp[i][j] = i; // Remove all characters of s1
                else if (s1[i - 1] == s2[j - 1])
                    dp[i][j] = dp[i - 1][j - 1];
                else
                    dp[i][j] = 1 + min({ dp[i - 1][j],    // Delete
                                         dp[i][j - 1],    // Insert
                                         dp[i - 1][j - 1] // Replace
                                       });
            }
        }

        return dp[m][n];
    }
};
