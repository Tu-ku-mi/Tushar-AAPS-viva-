#include <iostream>
#include <vector>
#include <string>
using namespace std;

class KMPMatcher {
public:
    vector<int> buildLPS(const string &pattern) {
        int n = pattern.length();
        vector<int> lps(n, 0);
        int len = 0; // length of the previous longest prefix suffix
        int i = 1;

        while (i < n) {
            if (pattern[i] == pattern[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1]; // fallback
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    vector<int> search(const string &text, const string &pattern) {
        vector<int> result;
        vector<int> lps = buildLPS(pattern);

        int i = 0; // index for text
        int j = 0; // index for pattern

        while (i < text.size()) {
            if (pattern[j] == text[i]) {
                i++;
                j++;
            }

            if (j == pattern.size()) {
                result.push_back(i - j); // pattern found at index i - j
                j = lps[j - 1]; // continue to search for next match
            } else if (i < text.size() && pattern[j] != text[i]) {
                if (j != 0)
                    j = lps[j - 1];
                else
                    i++;
            }
        }

        return result;
    }
};
