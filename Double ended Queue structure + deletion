#include <iostream>
using namespace std;

class Deque {
private:
    int *arr;
    int front;
    int rear;
    int size;
    int capacity;

public:
    Deque(int cap) {
        capacity = cap;
        arr = new int[capacity];
        front = -1;
        rear = 0;
        size = 0;
    }

    ~Deque() {
        delete[] arr;
    }

    bool isFull() {
        return size == capacity;
    }

    bool isEmpty() {
        return size == 0;
    }

    bool insertFront(int key) {
        if (isFull()) return false;

        if (isEmpty()) {
            front = 0;
            rear = 0;
        } else {
            front = (front - 1 + capacity) % capacity;
        }

        arr[front] = key;
        size++;
        return true;
    }

    bool insertRear(int key) {
        if (isFull()) return false;

        if (isEmpty()) {
            front = 0;
            rear = 0;
        } else {
            rear = (rear + 1) % capacity;
        }

        arr[rear] = key;
        size++;
        return true;
    }

    // Delete element from front
    bool deleteFront() {
        if (isEmpty()) return false;

        if (front == rear) {
            front = -1;
            rear = 0;
        } else {
            front = (front + 1) % capacity;
        }
        size--;
        return true;
    }

    // Delete element from rear
    bool deleteRear() {
        if (isEmpty()) return false;

        if (front == rear) {
            front = -1;
            rear = 0;
        } else {
            rear = (rear - 1 + capacity) % capacity;
        }
        size--;
        return true;
    }

    void display() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % capacity;
        }
        cout << "\n";
    }
};
