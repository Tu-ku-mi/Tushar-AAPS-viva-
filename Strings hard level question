#include <string>
#include <unordered_map>
#include <climits>
using namespace std;

class MinimumWindowSubstring {
public:
    string minWindow(string s, string t) {
        if (s.empty() || t.empty()) return "";

        unordered_map<char, int> targetFreq;
        for (char c : t)
            targetFreq[c]++;

        int required = targetFreq.size();
        int formed = 0;
        unordered_map<char, int> windowFreq;

        int l = 0, r = 0;
        int minLen = INT_MAX, start = 0;

        while (r < s.size()) {
            char ch = s[r];
            windowFreq[ch]++;

            if (targetFreq.count(ch) && windowFreq[ch] == targetFreq[ch])
                formed++;

            while (l <= r && formed == required) {
                if (r - l + 1 < minLen) {
                    minLen = r - l + 1;
                    start = l;
                }

                char leftChar = s[l];
                windowFreq[leftChar]--;
                if (targetFreq.count(leftChar) && windowFreq[leftChar] < targetFreq[leftChar])
                    formed--;

                l++;
            }

            r++;
        }

        return minLen == INT_MAX ? "" : s.substr(start, minLen);
    }
};
