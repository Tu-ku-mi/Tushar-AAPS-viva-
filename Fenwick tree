#include <iostream>
#include <vector>
using namespace std;

class FenwickTree {
private:
    vector<int> bit; // Binary Indexed Tree
    int n;

public:
    FenwickTree(int size) {
        n = size;
        bit.assign(n + 1, 0);
    }

    // Update index i (1-based) with value delta
    void update(int i, int delta) {
        while (i <= n) {
            bit[i] += delta;
            i += i & -i; // Move to next index
        }
    }

    // Query prefix sum from index 1 to i
    int query(int i) const {
        int sum = 0;
        while (i > 0) {
            sum += bit[i];
            i -= i & -i; // Move to parent
        }
        return sum;
    }

    // Query sum of elements in range [l, r]
    int rangeQuery(int l, int r) const {
        return query(r) - query(l - 1);
    }

    // Build the tree with an initial array (1-based index)
    void build(const vector<int>& arr) {
        for (int i = 1; i <= n; i++) {
            update(i, arr[i - 1]); // arr is 0-based
        }
    }
};
